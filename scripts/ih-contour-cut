#!python
import argparse
import traceback
import ih.imgproc

parser = argparse.ArgumentParser(description = "Smoothes an image based on a evenly distributed kernel.")
parser.add_argument("--input", dest="input", help="Path to input image.", required = True)
parser.add_argument("--binary", dest="binary", help="Binary image to calculate contours from", required = True)
parser.add_argument("--basemin", default=100, dest="basemin", type=int, help="Minimum area of contour required to keep in final image.")
parser.add_argument("--padminx", default=0, dest="padminx", type=int, help="Padding added to left.")
parser.add_argument("--padmaxx", default=0, dest="padmaxx", type=int, help="Padding added to right.")
parser.add_argument("--padminy", default=0, dest="padminy", type=int, help="Padding added to top.")
parser.add_argument("--padmaxy", default=0, dest="padmaxy", type=int, help="Padding added to bottom.")
parser.add_argument("--resize", default=False, dest="resize", action="store_true", help="Whether or not to resize the actual image.")
parser.add_argument("--returnBound", default=False, dest="returnBound", action="store_true", help="Whether or not to write the bound.")
parser.add_argument("--roiwrite", default="roi.json", dest="roiwrite", help="The name of the roi file to write.")
parser.add_argument("--outputdir", dest="outputdir", default=".", help="Path to write output files, if not specified use current directory.")
parser.add_argument("--output", default=None, dest="output", help="Name of output image to write, if not specified, use input image name.")
parser.add_argument("--writeblank", default=False, action="store_true", help="If errors happen, write a blank file.  Used to ensure dependent files exist for pegasus workflows.")
args = parser.parse_args()

try:
    plant = ih.imgproc.Image(args.input, args.outputdir, args.output, False)
    plant.contourCut(args.binary, args.basemin, [args.padminy, args.padmaxy, args.padminx, args.padmaxx], args.resize, args.returnBound, args.roiwrite)
    plant.write()
except Exception as e:
    print traceback.format_exc()
    if args.writeblank:
      with open(args.outputdir + "/" + args.output, "w") as wh:
        wh.write("not an image.")
