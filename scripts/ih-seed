#!python
import cv2
import ih.imgproc
import argparse
import os

parser = argparse.ArgumentParser(description = "Processes & Extracts a seed scan.")
parser.add_argument("--input", dest="input", help="Path to input seed scan image.", required = True)
parser.add_argument("--output", dest="output", help="Path to output csv file.", required = True)
parser.add_argument("--dpi", dest="dpi", help="dpi of the image.", type = float, default = 600)
parser.add_argument("--roi", dest="roi", help="roi file")
parser.add_argument("--thresh", dest="thresh", type=int, default=230, help="Threshold value.")
parser.add_argument("--ystart", dest="ystart", default=-1, help="Minimum Y of the roi.")
parser.add_argument("--yend", dest="yend", default=-1, help="Maximum Y of the roi.")
parser.add_argument("--xstart", dest="xstart", default=-1, help="Minimum X of the roi.")
parser.add_argument("--xend", dest="xend", default=-1, help="Maximum X of the roi.")
parser.add_argument("--writesteps", dest="writesteps", default = False, action = "store_true", help="If specified, write processing steps.")
args = parser.parse_args()

prefix = os.path.basename(args.input).split(".")[0]
seed = ih.imgproc.Image(args.input)

if args.roi:
  seed.crop(args.roi, resize = True)
else:
  seed.crop([args.ystart, args.yend, args.xstart, args.xend], resize = True)
if args.writesteps:
  seed.write(prefix + "_crop.png")

seed.convertColor("bgr", "gray")

seed.equalizeHist()
seed.threshold(args.thresh)
seed.save("thresh")
if args.writesteps:
  seed.write(prefix + "_thresh.png")

seed.contourChop("thresh", 1000)
if args.writesteps:
  seed.write(prefix + "_final.png")

contours,hierarchy = cv2.findContours(seed.image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

fh = open(args.output, "w")
fh.write("seed,area (cm^2),length (cm),width (cm)\n")

i2c = 2.54

for i,cnt in enumerate(contours):
    rect = cv2.minAreaRect(cnt)
    area = cv2.contourArea(cnt) * i2c / (args.dpi * args.dpi)
    length = max(rect[1][1], rect[1][0]) * i2c / args.dpi
    width = min(rect[1][1], rect[1][0]) * i2c / args.dpi
    fh.write("%s,%s,%s,%s\n" % (i,area,length,width))

if args.writesteps:
  seed.convertColor("gray", "bgr")
  seed.drawContours()
  seed.write(prefix + "_contours.png")
