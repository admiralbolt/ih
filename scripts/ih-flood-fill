#!python
import argparse
import traceback
import ih.imgproc

parser = argparse.ArgumentParser(description = "Smoothes an image based on a evenly distributed kernel.")
parser.add_argument("--input", dest="input", help="Path to input image.", required = True)
parser.add_argument("--mask", dest="mask", help="Path to mask image.", required = True)
parser.add_argument("--low", dest="low", nargs="+", type=int, help="Maximal lower brigthness/color difference.", required = True)
parser.add_argument("--high", dest="high", nargs="+", type=int, help="Maximal upper brigthness/color difference.", required = True)
parser.add_argument("--writeColor", dest="writeColor", nargs="+", type=int, help="Write Color.")
parser.add_argument("--connectivity", dest="connectivity", type=int, default=4, help="Number of neighboring pixels to consider.")
parser.add_argument("--fixed", dest="fixed", default=False, action="store_true", help="Use difference relative to the seed.")
parser.add_argument("--seedx", dest="seedx", type=int, default=0, help="X coordinate of the seed.")
parser.add_argument("--seedy", dest="seedy", type=int, default=0, help="Y coordinate of the seed.")
parser.add_argument("--findSeed", dest="findSeed", default=False, action="store_true", help="Calculate seed from a given image.")
parser.add_argument("--seedMask", dest="seedMask", help="Path to seed mask image.")
parser.add_argument("--binary", dest="binary", default=False, action="store_true", help="Specify if flood is performed on a grayscale image.")
parser.add_argument("--outputdir", dest="outputdir", default=".", help="Path to write output files, if not specified use current directory.")
parser.add_argument("--output", default=None, dest="output", help="Name of output image to write, if not specified, use input image name.")
parser.add_argument("--writeblank", default=False, action="store_true", help="If errors happen, write a blank file.  Used to ensure dependent files exist for pegasus workflows.")
args = parser.parse_args()

try:
    plant = ih.imgproc.Image(args.input, args.outputdir, args.output, False)
    plant.floodFill(args.mask,
                    tuple(args.low),
                    tuple(args.high),
                    writeColor = tuple(args.writeColor),
                    connectivity = args.connectivity,
                    fixed = args.fixed,
                    seed = tuple([args.seedx, args.seedy]),
                    findSeed = args.findSeed,
                    seedMask = args.seedMask,
                    binary = args.binary
                    )
    plant.write()
except Exception as e:
    print traceback.format_exc()
    if args.writeblank:
        with open(args.outputdir + "/" + args.output, "w") as wh:
            wh.write("not an image.")
