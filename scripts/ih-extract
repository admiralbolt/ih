#!python
import argparse
import traceback
import ih.imgproc
import os
import sqlite3

parser = argparse.ArgumentParser(description = "Extracts numerical information from an image.")
parser.add_argument("--input", dest="input", help="Path to processed image.", required = True)
parser.add_argument("--dbid", dest="dbid", help="Image Id, used for database writing", required = True)
parser.add_argument("--db", dest="db", help="Path to database to write", required = True)
parser.add_argument("--dimensions", dest="dimensions", default=False, action="store_true", help="Extract dimensions.")
parser.add_argument("--dimfromroi", dest="dimfromroi", help="Path to roi file for modified dimensions extraction.")
parser.add_argument("--pixels", dest="pixels", default=False, action="store_true", help="Extract pixels.")
parser.add_argument("--colors", dest="colors", default=False, action="store_true", help="Extract color data.")
parser.add_argument("--channels", dest="channels", default=False, action="store_true", help="Extract channel data.")
parser.add_argument("--bins", dest="bins", default=None, help="Path to bin file.")
parser.add_argument("--moments", dest="moments", default=False, action="store_true", help="Extract moment data.")
parser.add_argument("--hull", dest="hull", default=False, action="store_true", help="Extract area of convex hull of entire image.")
parser.add_argument("--circle", dest="circle", default=False, action="store_true", help="Extract area of min enclosing circle of entire image.")
args = parser.parse_args()

try:
    plant = ih.imgproc.Image(args.input, ".", db = args.db, dbid = args.dbid)

    plant.extractFinalPath()

    if args.dimfromroi:
      plant.extractDimsFromROI(args.dimfromroi):
    elif args.dimensions:
        plant.extractDimensions()

    if args.pixels:
        plant.extractPixels()

    if args.moments:
        plant.extractMoments()

    if args.colors:
        plant.extractColorData()

    if args.channels:
        plant.extractColorChannels()

    if args.bins:
        plant.extractBins(args.bins)

    if args.hull:
        plant.extractConvexHull()

    if args.circle:
        plant.extractMinEnclosingCircle()



except Exception as e:
    print traceback.format_exc()
